#!/usr/bin/env python

"""
 This source file is part of the Swift.org open source project

 Copyright 2015 - 2016 Apple Inc. and the Swift project authors
 Licensed under Apache License v2.0 with Runtime Library Exception

 See http://swift.org/LICENSE.txt for license information
 See http://swift.org/CONTRIBUTORS.txt for Swift project authors

 -------------------------------------------------------------------------
 This script is used to bootstrap the Swift package manager build.

 It does so by writing out a build task file which can be used to build a
 stage1 package manager. That package manager is then expected to be able
 to build itself to produce the production tools.

 Note that currently this script is also responsible for building the package
 manager in such a way that it can be installed along with the Swift package. In
 particular, it knows how to build the runtime PackageDescription library
 correctly and install it.

"""

from __future__ import print_function

try:
    from cStringIO import StringIO
except ImportError:
    from io import StringIO
import argparse
import errno
import json
import os
import platform
import shlex
import subprocess
import sys
import tempfile
import pipes
import shutil

###

def note(message):
    print("%s: note: %s" % (os.path.basename(sys.argv[0]), message))
    sys.stdout.flush()

def error(message):
    print("%s: error: %s" % (os.path.basename(sys.argv[0]), message))
    sys.stdout.flush()
    raise SystemExit(1)

def mkdir_p(path):
    """
    mkdir_p(path)

    Create the given directory, if it does not exist.
    """

    try:
        os.makedirs(path)
    except OSError as e:
        # Ignore EEXIST, which may occur during a race condition.
        if e.errno != errno.EEXIST:
            raise

# FIXME: Consider eliminating this once the build task format supports node
# hashing.
def write_file_if_changed(path, data):
    """
    write_file_if_changed(path, data)

    Write the given data to the path, only updating the file if the contents are
    different than the current ones.
    """

    try:
        with open(path) as f:
            old_data = f.read()
    except:
        old_data = None
    if old_data == data:
        return

    with open(path, "w") as f:
        f.write(data)

###

g_num_cpus = os.sysconf("SC_NPROCESSORS_ONLN")
g_default_sysroot = None
if platform.system() == 'Darwin':
    g_platform_path = subprocess.check_output(
        ["xcrun", "--sdk", "macosx", "--show-sdk-platform-path"], universal_newlines=True).strip()
    g_default_sysroot = subprocess.check_output(
        ["xcrun", "--sdk", "macosx", "--show-sdk-path"], universal_newlines=True).strip()

class Target(object):
    @property
    def virtual_node(self):
        return "<target-%s>" % (self.name)

    @property
    def linked_virtual_node(self):
        return "<link-%s>" % (self.name)

    def __init__(self, name, dependencies=[], swiftflags=[], extra_libs=[],
                 subpath=None):
        self.name = name
        self.dependencies = list(dependencies)
        self.swiftflags = list(swiftflags)
        self.extra_libs = list(extra_libs)

        # Discover the source files, and whether or not this is a library.
        self.is_library = True
        self.swift_sources = []
        for (dirpath, dirnames, filenames) in os.walk(
                os.path.join(g_source_root, subpath or self.name)):
            for name in filenames:
                path = os.path.join(dirpath, name)
                _, ext = os.path.splitext(name)
                if ext == '.swift':
                    if name == 'main.swift':
                        self.is_library = False
                    self.swift_sources.append(path)

        self.swift_sources.sort()

    def write_swift_compile_commands(self, args, target_build_dir,
                                     module_dir, output, objects,
                                     link_input_nodes, predecessor_node):
        # Compute the derived paths.
        module_path = os.path.join(module_dir, "%s.swiftmodule" % (self.name,))

        # Create the per-file entries.
        swift_objects = []
        for path in self.swift_sources:
            filename = os.path.basename(path)
            base_path = os.path.join(
                target_build_dir, os.path.splitext(filename)[0])
            object_path = base_path + ".o"
            swift_objects.append(object_path)
            objects.append(object_path)

        # Form the command to build all the swift files.
        #
        # FIXME: The -j doesn't belong here, and should move into the
        # 'swift' tool.
        module_name = self.name.replace("-", "_")
        other_args = ['-Onone', '-j%d' % g_num_cpus] + self.swiftflags
        if platform.system() == 'Darwin':
            other_args.extend(["-target", "x86_64-apple-macosx10.10"])
        if args.sysroot:
            other_args.extend(["-sdk", args.sysroot])
        compile_swift_node = '<compile-swift-%s>' % (self.name,)
        link_input_nodes.append(compile_swift_node)

        print("  %s:" % json.dumps(compile_swift_node), file=output)
        print("    tool: swift-compiler", file=output)
        print("    executable: %s" % json.dumps(args.swiftc_path), file=output)
        # FIXME: We shouldn't even need to specify the sources here once we have
        # discovered dependencies support.
        print("    inputs: %s" % json.dumps(
            [predecessor_node] + self.swift_sources), file=output)
        print("    outputs: %s" % json.dumps(
            [compile_swift_node, module_path] + swift_objects), file=output)
        print("    module-name: %s" % json.dumps(module_name), file=output)
        print("    module-output-path: %s" % json.dumps(module_path), file=output)
        print("    sources: %s" % json.dumps(
            self.swift_sources), file=output)
        print("    objects: %s" % json.dumps(swift_objects), file=output)
        print("    import-paths: %s" % json.dumps(
            [module_dir]), file=output)
        print("    other-args: %s" % json.dumps(' '.join(other_args)), file=output)
        print("    temps-path: %s" % json.dumps(target_build_dir), file=output)
        print("    is-library: %s" % json.dumps(
            str(bool(self.is_library)).lower()), file=output)
        print(file=output)

# Hard-coded target definition.
g_project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
g_source_root = os.path.join(g_project_root, "Sources")
targets = [
    Target('libc'),
    Target('POSIX', dependencies=["libc"]),
    Target('Utility', dependencies=["POSIX", "libc"]),
    Target('PackageDescription'),
    Target('Xcodeproj', dependencies=["PackageType", "Utility", "POSIX", "libc"]),
    Target('Multitool', dependencies=["PackageType", "Utility", "POSIX", "libc"]),
    Target('PackageType', dependencies=["PackageDescription", "Utility", "POSIX", "libc"]),
    Target('Transmute', dependencies=["PackageType", "PackageDescription", "Utility", "POSIX", "libc"]),
    Target('ManifestParser', dependencies=["PackageType", "Utility", "PackageDescription", "POSIX", "libc"]),
    Target('Get', dependencies=["ManifestParser", "PackageDescription", "PackageType", "Utility", "POSIX", "libc"]),
    Target('Build', dependencies=["PackageType", "Utility", "PackageDescription", "POSIX", "libc"]),
    Target('swift-build', dependencies=["Xcodeproj", "Transmute", "Multitool", "Build", "Get", "ManifestParser", "PackageDescription", "PackageType", "Utility", "POSIX", "libc"]),
    Target('swift-test', dependencies=["Multitool", "PackageType", "PackageDescription", "Utility", "POSIX", "libc"]),
]
target_map = dict((t.name, t) for t in targets)

def create_bootstrap_files(sandbox_path, args):
    # Write out the build file.
    output = StringIO()

    # Write out the task file header.
    print("client:", file=output)
    print("  name: swift-build", file=output)
    print(file=output)

    # Write out the tools section.
    #
    # FIXME: Not yet defined.
    print("tools: {}", file=output)
    print(file=output)

    # Compute the list of active targets.
    active_targets = targets

    # Write out the targets list.
    #
    # We support 'all' (build all targets) and an individual name for each
    # target.
    #
    # FIXME: Need support for default target.
    print("targets:", file=output)
    print("  \"\": %s" % (json.dumps(
        [target.virtual_node for target in active_targets]),), file=output)
    print("  all: %s" % (json.dumps(
        [target.virtual_node for target in active_targets]),), file=output)
    for target in active_targets:
        print("  %s: %s" % (
            target.name, json.dumps([target.virtual_node])), file=output)
    print(file=output)

    # Create the shared lib dir.
    lib_dir = os.path.join(sandbox_path, "lib")
    mkdir_p(lib_dir)

    # Create the shared bin dir.
    bin_dir = os.path.join(sandbox_path, "bin")
    mkdir_p(bin_dir)

    # Create the shared module dir.
    module_dir = os.path.join(sandbox_path, "modules")
    mkdir_p(module_dir)

    print("commands:", file=output)
    for target in targets:
        print("  # Target Commands: %r" % (target.name,), file=output)
        target_build_dir = os.path.join(sandbox_path, target.name + ".build")
        mkdir_p(target_build_dir)

        predecessor_node = "<entry-%s>" % (target.name,)
        objects = []
        link_input_nodes = [predecessor_node]

        # Write out the predecessor node used to order w.r.t. other targets.
        print("  %s:" % json.dumps(predecessor_node), file=output)
        print("    tool: phony", file=output)
        print("    inputs: %s" % json.dumps(
            [target_map[name].virtual_node for name in target.dependencies]), file=output)
        print("    outputs: %s" % json.dumps([predecessor_node]), file=output)
        print(file=output)

        # Write out the target build commands (we just name the command and node
        # the same).

        # Write the Swift compile commands, if used.
        if target.swift_sources:
            target.write_swift_compile_commands(
                args, target_build_dir, module_dir, output, objects,
                link_input_nodes, predecessor_node)

        # Form the command line to link.
        linked_libraries = []
        if target.is_library:
            link_output_path = os.path.join(lib_dir, "%s.a" % (target.name,))
            link_command = ['rm', '-f', pipes.quote(link_output_path), ';',
                            'ar', 'cr', pipes.quote(link_output_path)]
            link_command.append(' '.join(pipes.quote(o) for o in objects))
        else:
            link_output_path = os.path.join(bin_dir, target.name)

            link_command = [args.swiftc_path, '-o', pipes.quote(link_output_path)]
            if args.sysroot:
                link_command.extend(["-sdk", args.sysroot])
            if platform.system() == 'Darwin':
                link_command.extend(["-target", "x86_64-apple-macosx10.10"])
            link_command.append(' '.join(pipes.quote(o) for o in objects))
            for dependency in target.dependencies:
                dependency_lib_path = os.path.join(lib_dir, "%s.a" % dependency)
                link_command.append(pipes.quote(dependency_lib_path))
                linked_libraries.append(dependency_lib_path)
            if platform.system() == 'Darwin':
                link_command.extend(["-Xlinker", "-all_load"])
            for lib in target.extra_libs:
                link_command.extend(["-Xlinker", "-l%s" % (lib,)])

        # Write out the link command.
        print("  %s:" % json.dumps(target.linked_virtual_node), file=output)
        print("    tool: shell", file=output)
        print("    description: Link %s" % (target.name if target.is_library else link_output_path,), file=output)
        print("    inputs: %s" % json.dumps(
            link_input_nodes + objects + linked_libraries), file=output)
        print("    outputs: %s" % json.dumps(
            [target.linked_virtual_node, link_output_path]), file=output)
        print("    args: %s" % ' '.join(link_command), file=output)
        print(file=output)

        # Write the top-level target group command.
        print("  %s:" % json.dumps(target.virtual_node), file=output)
        print("    tool: phony", file=output)
        print("    inputs: %s" % json.dumps(
            [target.linked_virtual_node]), file=output)
        print("    outputs: %s" % json.dumps([target.virtual_node]), file=output)
        print(file=output)

    # Write the output file.
    write_file_if_changed(os.path.join(sandbox_path, "build.swift-build"),
                          output.getvalue())

def process_runtime_libraries(build_path, args, bootstrap=False):
    if bootstrap:
        module_input_path = os.path.join(
            build_path, "modules", "PackageDescription.swiftmodule")
        input_lib_path = os.path.join(
            build_path, "lib", "PackageDescription.a")
    else:
        module_input_path = os.path.join(
            build_path, "debug", "PackageDescription.swiftmodule")
        input_lib_path = os.path.join(
            build_path, "debug", "libPackageDescription.a")

    lib_path = os.path.join(build_path, "lib", "swift", "pm")
    mkdir_p(lib_path)
    runtime_module_path = os.path.join(
        lib_path, "PackageDescription.swiftmodule")
    cmd = ["cp", module_input_path, runtime_module_path]
    subprocess.check_call(cmd)
    if platform.system() == 'Darwin':
        runtime_lib_path = os.path.join(lib_path, "libPackageDescription.dylib")
        cmd = [args.swiftc_path, "-Xlinker", "-dylib", "-o",
               runtime_lib_path,
               "-Xlinker", "-all_load",
               input_lib_path,
               "-target", "x86_64-apple-macosx10.10"]
    else:
        # Derive the command line to use by querying to swiftc
        # driver. Unfortunately we cannot use it directly due to the inability
        # to use an -X... style arg to pass arguments to the Clang driver, which
        # it calls before calling the linker.

        # This is the command we would like to use.
        #
        # We include an RPATH entry so that the Swift libraries can be found
        # relative to where it will be installed (in 'lib/swift/pm/...').
        runtime_lib_path = os.path.join(lib_path, "libPackageDescription.so")
        cmd = [args.swiftc_path, "-Xlinker", "-shared", "-o", runtime_lib_path,
               "-Xlinker", "--whole-archive",
               "-Xlinker", input_lib_path,
               "-Xlinker", "--no-whole-archive", "-lswiftGlibc",
               "-Xlinker", "-rpath=$ORIGIN/../linux"]

        # We need to pass one swift file here to bypass the "no input files"
        # error.
        tf = tempfile.NamedTemporaryFile(suffix=".swift")
        cmds = subprocess.check_output(
            cmd + [tf.name, "-###"], universal_newlines=True).strip().split("\n")

        # Get the link command 'swiftc' used.
        link_cmd = shlex.split(cmds[-1])

        # Unqoute any quoted characters.
        link_cmd = [arg.replace("\\", "") for arg in link_cmd]

        # Drop any .o files, and the -Xlinker which preceeds '-shared'.
        try:
            idx = link_cmd.index("-shared")
        except:
            idx = -1
        if idx == -1 or link_cmd[idx - 1] != "-Xlinker":
            raise SystemExit("unable to understand 'swiftc' driver commands")
        del link_cmd[idx - 1]
        cmd = [arg for arg in link_cmd
               if arg.endswith("swift_begin.o") or arg.endswith("swift_end.o") or (not arg.endswith(".o") and not arg.endswith(".autolink"))]
    subprocess.check_call(cmd)
    return (runtime_module_path, runtime_lib_path)

def get_swift_build_tool_path():
    # Search for a 'swift-build-tool' to use.

    # First, look in $(BUILT_PRODUCTS_DIR) in case we are being built from Xcode
    # along with the llbuild project.
    built_products_dir = os.environ.get("BUILT_PRODUCTS_DIR")
    if built_products_dir:
        sbt_path = os.path.join(built_products_dir, "swift-build-tool")
        if os.path.exists(sbt_path):
            return sbt_path

    if os.environ.get("SWIFT_BUILD_TOOL"):
        return os.environ.get("SWIFT_BUILD_TOOL")

    # Next, search for it in PATH.
    try:
        return subprocess.check_output(["which", "swift-build-tool"], universal_newlines=True).strip()
    except:
        pass

    # If that failed, on Darwin use xcrun to search for the tool.
    if platform.system() == 'Darwin':
        try:
            sbt_path = subprocess.check_output(
                ["xcrun", "--find", "swift-build-tool"],
                stderr=subprocess.PIPE, universal_newlines=True).strip()
            if os.path.exists(sbt_path):
                return sbt_path
        except subprocess.CalledProcessError:
            pass

    # If all else failed, report an error.
    error("unable to find 'swift-build-tool' tool for bootstrap build")

def main():
    parser = argparse.ArgumentParser(
        usage="%(prog)s [options] [clean|all|test|install]",
        description="This script will build a bootstrapped copy of the Swift "
                    "Package Manager, and optionally perform extra actions "
                    "like installing the result (with 'install') to a "
                    "location ('--prefix').")
    parser.add_argument("build_actions",
                        help="Extra actions to perform. Can be any number of "
                             "the following: [clean, all, test, install]",
                        nargs="*", default=["all"])
    parser.add_argument("--swiftc", dest="swiftc_path",
                        help="path to the swift compiler [%(default)s]",
                        default=os.getenv("SWIFT_EXEC") or "swiftc",
                        metavar="PATH")
    parser.add_argument("--sbt", dest="sbt_path",
                        help="path to the 'swift-build-tool' tool "
                             "[%(default)s]",
                        metavar="PATH")
    parser.add_argument("--sysroot",
                        help="compiler sysroot to pass to Swift [%(default)s]",
                        default=g_default_sysroot, metavar="PATH")
    parser.add_argument("--build", dest="build_path",
                        help="create build products at PATH [%(default)s]",
                        default=".build", metavar="PATH")
    parser.add_argument("--prefix", dest="install_prefix",
                        help="use PATH as the prefix for installing "
                             "[%(default)s]",
                        default="/usr/local", metavar="PATH")
    parser.add_argument("-v", "--verbose", action="store_true",
                        help="use verbose output")
    parser.add_argument("--xctest", dest="xctest_path",
                        help="Path to XCTest build directory")
    parser.add_argument("--build-tests", action="store_true",
                        help="Deprecated")
    args = parser.parse_args()
    build_actions = set(args.build_actions)

    # Validate the build actions.
    for action in build_actions:
        if action not in ("clean", "all", "test", "install"):
            raise SystemExit("unknown build action: %r" % (action,))

    # Compute the build paths.
    build_path = os.path.join(g_project_root, args.build_path)
    sandbox_path = os.path.join(build_path, ".bootstrap")

    # If the action is "clean", just remove the bootstrap and build directories.
    if "clean" in build_actions:
        cmd = ["rm", "-rf", sandbox_path]
        note("cleaning stage1: %s" % (' '.join(cmd),))
        result = subprocess.call(cmd)
        if result != 0:
            error("build failed with exit status %d" % (result,))

        cmd = ["rm", "-rf", build_path]
        note("cleaning self-hosted: %s" % (' '.join(cmd),))
        result = subprocess.call(cmd)
        if result != 0:
            error("build failed with exit status %d" % (result,))
        raise SystemExit(0)

    # All other actions build.

    # Create the sandbox.
    mkdir_p(sandbox_path)

    # Determine the swift-build-tool to use.
    args.sbt_path = os.path.abspath(
        args.sbt_path or get_swift_build_tool_path())

    # Due to bug in Xcode where SWIFT_EXEC is not set correctly by downloadable toolchain
    if os.getenv("XCODE_DEFAULT_TOOLCHAIN_OVERRIDE"):
        args.swiftc = os.path.join(os.getenv("XCODE_DEFAULT_TOOLCHAIN_OVERRIDE"), "usr/bin/swiftc")

    # Create or update the bootstrap files.
    create_bootstrap_files(sandbox_path, args)

    # Run the stage1 build.
    cmd = [args.sbt_path, "-f", os.path.join(sandbox_path, "build.swift-build")]
    if args.verbose:
        cmd.append("-v")
    note("building stage1: %s" % ' '.join(cmd))
    result = subprocess.call(cmd)
    if result != 0:
        error("build failed with exit status %d" % (result,))

    # Stage the stage1 runtime library.
    #
    # FIXME: Integrate this into the bootstrap build.
    runtime_module_path, runtime_lib_path = process_runtime_libraries(
        sandbox_path, args, bootstrap=True)

    # Symlink the expected lib location so that we don't yet
    # have to support installation logic in SwiftPM proper
    symlink_path = os.path.join(build_path, "lib", "swift", "pm")
    if not os.path.islink(symlink_path):
        path = os.path.join(build_path, "lib", "swift")
        shutil.rmtree(path, True)
        mkdir_p(path)
        os.symlink(os.path.join(build_path, "debug"), symlink_path)
    symlink_path = os.path.join(build_path, "bin")
    if not os.path.islink(symlink_path):
        path = os.path.join(build_path, "debug")
        shutil.rmtree(path, True)
        os.symlink(path, symlink_path)

    # Build the package manager with itself.
    env_cmd = ["env",
               "SWIFT_EXEC=" + args.swiftc_path,
               "SWIFT_BUILD_TOOL=" + args.sbt_path,
               "SWIFT_BUILD_PATH=" + build_path]
    if args.sysroot:
        env_cmd.append("SYSROOT=" + args.sysroot)
    # On Linux, we need to embed an RPATH so swift-{build,get} can find the core
    # libraries.
    if platform.system() == 'Linux':
        env_cmd.append("SWIFTPM_EMBED_RPATH=$ORIGIN/../lib/swift/linux")
    else:
        env_cmd.append("SWIFTPM_EMBED_RPATH=@executable_path/../lib/swift/macosx")

    cmd = [os.path.join(sandbox_path, "bin", "swift-build")]
    if args.xctest_path:
        env_cmd.append("SWIFTPM_EXTRA_IMPORT=" + args.xctest_path)
        # Tell the linker where to look for XCTest, but autolinking
        # knows to pass -lXCTest.
        cmd.extend(["-Xlinker", "-L", "-Xlinker", args.xctest_path])
        # Add an RPATH, so that the tests can be run directly.
        cmd.extend(["-Xlinker", "-rpath", "-Xlinker", args.xctest_path])

    cmd = env_cmd + cmd

    note("building self-hosted 'swift-build': %s" % (
        ' '.join(cmd),))
    result = subprocess.call(cmd, cwd=g_project_root)
    if result != 0:
        error("build failed with exit status %d" % (result,))

    swift_build_path = os.path.join(build_path, "debug", "swift-build")
    swift_test_path = os.path.join(build_path, "debug", "swift-test")
    note("built: %s" % (swift_build_path,))

    # If testing, run each of the test bundles.
    if "test" in build_actions:
        # Construct the test environment.
        env_cmd = ["env",
                   "SWIFT_EXEC=" + args.swiftc_path,
                   "SWIFT_BUILD_TOOL=" + args.sbt_path,
                   "SWIFT_BUILD_PATH=" + build_path,
                   "SPM_INSTALL_PATH=" + build_path]

        cmd = env_cmd + [os.path.join(build_path, "debug", "swift-test")]
        result = subprocess.call(cmd, cwd=g_project_root)
        if result != 0:
            error("tests failed with exit status %d" % (result,))
    # If installing, put the build products in the appropriate location.
    if "install" in build_actions:
        bin_install_path = os.path.join(g_project_root, args.install_prefix,
                                        "bin")
        lib_install_path = os.path.join(g_project_root, args.install_prefix,
                                        "lib", "swift", "pm")
        mkdir_p(bin_install_path)
        mkdir_p(lib_install_path)
        for product_path in [swift_build_path, swift_test_path]:
            cmd = ["install", product_path, bin_install_path]
            note("installing %s: %s" % (
                os.path.basename(product_path), ' '.join(cmd)))
            result = subprocess.call(cmd)
            if result != 0:
                error("install failed with exit status %d" % (result,))
        for (resource_path, is_lib) in [(runtime_module_path, False),
                                        (runtime_lib_path, True)]:
            cmd = ["install"]
            if not is_lib:
                cmd.extend(["-m", "0644"])
            cmd.extend([resource_path, lib_install_path])
            note("installing %s: %s" % (
                os.path.basename(resource_path), ' '.join(cmd)))
            result = subprocess.call(cmd)
            if result != 0:
                error("install failed with exit status %d" % (result,))

if __name__ == '__main__':
    main()
